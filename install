#!/bin/bash

set -u

usage() {
    cat <<_END_
Usage: $0
    --image A --dir B --root C --mount D

        '--dir' and '--root' are mandatory.
        If '--image' is used, unpack/update the Venus image A to directory B.
        Next, modify the system at root C. The mountpoint of B on C shall be D.

    --verbose
        Print the steps the script executes.

    --quiet
        Do not report what you#re doing.

    --skip
        Skip existing files.

    --no-update
	Don't update our git submodules. (Useful while developing.)

    --sub=ADDON
        Process add-on scripts.

        Available additions:
_END_
    ls $HERE/install.d
    exit 1
}


apti() {
   R="$1"
   shift
   $Q echo Installing $@
   if test "$R" = "/" ; then
      apt-get install --yes --no-install-recommends -o Dpkg::Options::="--force-confdef" "$@" </dev/tty >/dev/tty 2>&1
   else
      systemd-nspawn -D "$R" apt-get install --yes --no-install-recommends -o Dpkg::Options::="--force-confdef" "$@" </dev/tty >/dev/tty 2>&1
   fi
}

subs() {
    W="$1"
    for S in "${SUB[@]}" ; do
        if test -f "$HERE/install.d/$S/$W" ; then
            $Q echo Processing "$S/$W"
            source "$HERE/install.d/$S/$W"
        fi
    done
}

_chg() {
    # check: do we replace DST from SRC?
    SRC="$1"
    DST="$2"
    test -n "$FORCE" && return 0
    test -f "$DST" || return 0
    test "$SRC" -ef "$DST" && return 0
    test "$SRC" -nt "$DST" && return 0
    cmp -s "$SRC" "$DST" && return 0
    # "cmp -s" compares sizes before reading, so we don't need to
    return 1
}

fdo() {
    # check: do we not replace DST?
    DST="$1"
    test -n "$FORCE" && return 1
    test -f "$DST" || return 1
    return 0
}

fchg() {
    # check: do we not replace DST from SRC?
    SRC="$1"
    DST="$2"
    _chg "$SRC" "$DST" || return 0
    rm -f "$DST"
    mkdir -p "$(dirname "$DST")"
    touch "$DST"
    if test -x "$SRC" ; then chmod 755 "$DST"; else chmod 644 "$DST"; fi
    return 1
}

fln() {
    # To link or not to link …
    SRC="$1"
    DST="$2"
    if test -e "$DST" && ! test -L "$DST" ; then
	    echo "ERROR: '$DST' is not a symlink. Exiting." >&2
        exit 1
    fi
    if test -z "$FORCE" && test -L "$DST" ; then return ; fi
    ln -sf "$SRC" "$DST"
}

# command line processing
TEMP=$(getopt -o 'fi:d:hr:m:nqs:v' --long 'help,force,skip,image:,dir:,root:,mount:,no-update,sub:,verbose' -n "$0" -- "$@")
if [ $? -ne 0 ]; then
    usage >&2
fi

set -e
eval set -- "$TEMP"
unset TEMP

HERE="$(realpath "$(dirname "$0")")"

Q=
verb=
FORCE=y
SUB=()
SUB_UPD=y

while : ; do
    case "$1" in
        (-h|--help)
            usage;
            exit 0 ;;
        (-q|--quiet)
            Q=":"
            shift ;;
        (-f|--force)
            FORCE=y
            shift ;;
        (--skip)
            FORCE=""
            shift ;;
        (-n|--no-update)
            SUB_UPD=
            shift ;;
        (-v|--verbose)
            verb=y
            shift ;;
        (-d|--dir)
            dir="$2"
            shift 2 ;;
        (-i|--img)
            img="$2"
            shift 2 ;;
        (-r|--root)
            root="$2"
            shift 2 ;;
        (-m|--mount)
            MNT="$2"
            shift 2 ;;
        (-s|--sub)
            if test -d "$HERE/install.d/$2" ; then 
                SUB+=("$2")
            else
                echo "Unknown argument ('$2'). Exiting." >&2
            fi
            shift 2 ;;
        (--)
            shift; break ;;
        (*)
            echo "Internal error! '$1'" >&2
            exit 1
    esac
done

if [ ! -v dir ] && [ $# -gt 0 ] ; then
    dir="$1"
    shift
fi
if [ ! -v root ] && [ $# -gt 0 ] ; then
    root="$1"
    shift
fi
if [ ! -v MNT ] ; then
    if [ $# -gt 0 ] ; then
        MNT="$1"
        shift
    else
        MNT="$dir"
    fi
fi

if [ ! -v dir ] ; then
    echo "A destination directory (-d …) is required" >&2
    exit 1
fi

if test "$verb" = "y" ; then
    Q=":"
    set -x
fi

if [ $# -gt 0 ] ; then
    echo "Superfluous arguments. ???" >&2
    exit 1
fi

temp=$(mktemp -d)
trap 'rm -r $temp' 0 1 2 15


################# install local requirements
I=""
which crudini >/dev/null 2>&1 || I="$I crudini"
which systemd-nspawn >/dev/null 2>&1 || I="$I systemd-container"
if test -n "$I" ; then
    $Q echo Locally installing $@
    apt install $I
fi

test -z "$SUB_UPD" || git submodule update --init

################# COPY
if [ ! -v img ] ; then
    $Q echo "No image given; not copying."
else
$Q echo Copying image

if test -d "$dir" ; then
   :
else
   btrfs subvol cre "$dir" || mkdir "$dir"
fi

# if the image is compressed, unpack it
imgz="$img"
img="${imgz%.gz}"
if [ "$img" != "$imgz" ] ; then
   img="$temp/${img##*/}"
   gzip -d < "$imgz" > "$img"
fi

mkdir $temp/dir
ld=$(losetup -f --show -P "$img")
trap 'losetup -d $ld; rm -r $temp' 0 1 2 15

mount ${ld}p2 $temp/dir
trap 'umount $temp/dir; losetup -d $ld; rm -r $temp' 0 1 2 15

rsync -a --numeric-ids --perms --inplace "$temp/dir/." "$dir/."
echo "Copy/sync finished."
trap "" 0 1 2 15

umount $temp/dir; losetup -d $ld; rm -r $temp
fi
################# END COPY


################# SETUP
if test -f "$root" ; then
    echo TODO root as an Image >&2
    exit 1
fi

R="$(realpath "$root")"
V="$(realpath "$dir")"

temp=$(mktemp -d)
trap 'rm -r $temp' 0 1 2 15
cd $temp
umask 022

LIBVV=/var/lib/venusian
LIBV=/var/lib/venusian/venus
USRV=/usr/lib/venusian/

mkdir -p "$R/opt/victronenergy"

subs pre

# create user
$Q echo Primary set-up
grep -qs "^venus:" "$R/etc/group" || chroot "$R" /sbin/addgroup --system venus
grep -qs "^venusian:" "$R/etc/passwd" || chroot "$R" /sbin/adduser --disabled-login --home "$LIBVV" --ingroup venus --system --comment "Venusian System" venusian
grep -qs "^venus:" "$R/etc/passwd" || chroot "$R" /sbin/adduser --disabled-login --home "$LIBV" --ingroup venus --system --comment "Venus Main User" venus

chroot "$R" /sbin/adduser venus systemd-journal
chroot "$R" /sbin/adduser venus dialout

# systemd
SERVICE="$USRV/service/"
mkdir -p "$SERVICE"
SC="$LIBV/.config/systemd/user.control"
mkdir -p "$R/$SC/default.target.wants/"
fln "$SERVICE" "$R/$LIBV/.config/systemd/user"
fln ".config/systemd/user.control" "$R/$LIBV/service"

# set up DBUS permissions
for f in "$V/etc/dbus-1/system.d"/* ; do
    g="$R/etc/dbus-1/system.d/${f##*/}"
    test -s "$g" || \
    sed <"$f" >"$g"  -e 's/"root"/"venus"/'
done

mkdir -p "$R$USRV"/{opt,.opt}
cp -r "$HERE/lib/"* "$R$USRV/"

$Q echo Checking startup scripts

lsrc() {
    ls "$V/etc/rcS.d"
    ls "$V/etc/rc5.d"
}
# not using the obvious (ls;ls)| pipe here because of a bash bug:
# line numbers on errors below this point would be wrong
lsrc | while read f ; do
    f="${f%.sh}"
    case "$f" in
        ### Startup scripts, rcS.d
        (S01keymap) ;; # host OS
        (S02sysfs) ;; # mounts a bunch of directories; host OS
        (S02zzz-resize-sdcard) ;; # host OS
        (S03mountall) ;; # host OS
        (S03test-data-partition) ;; # host problem
        (S04udev) ;; # host
        (S05modutils) ;; # host
        (S06alignment) ;; # host; mode 3 for alignment fixes (repair+complain)
        (S06checkroot) ;; # host
        (S06devpts) ;; # host
        (S07bootlogd) ;; # journal
        (S10overlays) ;; # done later
        (S20static-nodes) ;; # systemd
        (S29read-only-rootfs-hook) ;; # volatile /var/lib
        (S36bootmisc) ;; # various system stuff
        (S37populate-volatile)
            # systemd
            # TODO set up /data
            ;;
        (S38dmesg) ;; # journald
        (S38urandom) ;; # random seed. Host.
        (S39hostname) ;; # host
        (S40read-eeprom) ;; # we don't have that
        (S50iptables) ;; # host
        (S80watchdog) ;; # possible TODO
        (S90gpio_pins) ;; # empty list
        (S90machine-conf) ;; # not on RPi
        (S99custom-rc-early)
            # runs /data/rcS.local
            # possible TODO
            ;;

### Startup scripts, rc5.d
        (S01networking) ;; # systemd-networkd or whatever
        (S02dbus-1) ;; # in base system
        (S09haveged) ;; # obsolete since kernel 5.6
        (S15mountnfs) ;; # system
        (S20apmd) ;; # not applicable on Raspberry Pi
        (S20bluetooth) ;; # host system
        (S20dnsmasq) ;; # host system
        (S20syslog) ;; # host system
        (S21avahi-daemon)
            ## host system, but ...
            mkdir -p "$R/etc/avahi"
            if test ! -f "$R/etc/avahi/avahi-daemon.conf" ; then
                $Q echo Installing avahi-daemon
                apti "$R" avahi-daemon
            fi
            sed -i -e s/^use-iff-running=/use-iff-running=yes/ "$R/etc/avahi/avahi-daemon.conf"

            ## TODO Garmin service file?
            ;;

        (S30update-data) ;; # TODO automatic data update
        (S60php-fpm) ;; # possibly some TODO or other
        (S70connman) ;; # host problem
        (S70swupdate) ;; # empty
        (S75avahi-autoipd) ;; # host problem
        (S80resolv-watch) ;; # systemd-resolved or some other host program
        (S82report-data-failure) ;; # local file system monitoring is not a Venus problem
        (S90crond)
            ## host OS
            # one builtin cron script, which does automated software updates,
            # which we don't do
            ;;

        (S95svscanboot)
            # SVC
            # TODO convert to systemd
            ;;
        (S98scan-versions) ;; # alternate root file systems
        (S99check-updates) ;; # system update check
        (S99custom-rc-late)
            # run /data/rc.local
            # possible TODO
            ;;
        (S99rmnologin) ;; # systemd
        (S99stop-bootlogd) ;; # journald

        (*)
            echo "UNKNOWN startup script: $f" >&2
            exit 1 ;;
    esac
done

fdo "$R/$LIBV/.config/systemd/user.conf" || \
    cat >"$R/$LIBV/.config/systemd/user.conf" <<_END_
[Manager]
DefaultEnvironment="PATH=$USRV/bin:/bin:/sbin"
_END_

################# Services

fchg "$HERE/udev.yml" "$R/$USRV/udev.yml" || \
    cp "$HERE/udev.yml" "$R/$USRV/udev.yml"
fdo "$R/$LIBVV/udev.yml" ||
    cp "$HERE/udev.example.yml" "$R/$LIBV/udev.yml"
for f in $(ls "$HERE/service/") ; do
    fchg "$HERE/service/$f" "$R/$USRV/service/$f" || \
    sed -e "s#@USRV@#$USRV#" -e "s#@LIBV@#$LIBV#" -e "s#@LIBVV@#$LIBVV#" \
        < "$HERE/service/$f" > "$R/$USRV/service/$f"
done

WANTS="$SC/default.target.wants"
CR="crudini --ini-options=nospace --set"
$Q echo Converting services
mkdir -p "$WANTS"
ls "$V/opt/victronenergy/service/" | while read f ; do
    fx="${f##*/}"
    g="$SERVICE/$fx.service"
    test -n "$FORCE" || test ! -f "$g" || continue
    case "$fx" in 
        (ppp) continue ;; # Of course not.
        (llmnrd) continue ;; # Not that either.
        (simple-upnpd) continue ;; # no
        (netmon) continue ;; # avahi restart on network change
        (nginx) continue ;; # TODO teach the host OS
        (serial-starter) # that's the job of dbus-handler
            fln "$SERVICE/dbus-handler.service" "$WANTS/dbus-handler.service"
            continue ;;
        (dbus-digitalinputs) continue ;; # TODO?
        (dbus-qwacs) continue ;; # ?
        (dbus-fronius) continue ;; # ?
        (dbus-adc) continue ;; # ?
        (dbus-ble-sensors) continue ;; # ?
        (venus-html5-logger) continue ;; # what for?
        (gui)
            $CR "$g" Service ExecStart "$USRV/bin/start-gui"
            fchg "$V/opt/victronenergy/gui/start-gui.sh" "$R$USRV/bin/start-gui" ||
            sed -e 's#-f /etc/venus/headless#-e /dev/null#' \
                -e 's/mouse=-mouse/mouse=-nomouse/ '\
                -e 's/send --system/send --session/ '\
                -e 's#^scriptdir=.*#scriptdir=/opt/victronenergy/gui# '\
                < "$V/opt/victronenergy/gui/start-gui.sh" > "$R$USRV/bin/start-gui"
            ;;
        (*)
            $CR "$g" Service ExecStart /opt/victronenergy/service/$fx/run
            ;;
    esac
    if [ "$fx" != "localsettings" ] ; then
        $CR "$g" Unit Requires localsettings.service
        $CR "$g" Unit After localsettings.service
    fi
    $CR "$g" Service Type simple
    $CR "$g" Service Restart always
    $CR "$g" Service RestartSec 10
    fln "$SERVICE/$fx.service" "$WANTS/$fx.service"
done


################# ELF starter

LA="$V/lib/ld-2.31.so"
LB="$R/lib/ld-linux-armhf.so.3"
L=
for S in "${SUB[@]}" ; do
    test -s "$S/lib" || continue
    L=y
    source "$S/lib"
done

if test -n "$L" ; then
    $Q echo Skip patching ld-linux-armhf
elif test ! -s "$LB" || test "$LA" -nt "$LB" ; then
    # need to hack
    $Q echo Patching ld-linux-armhf
    sed -e 's#/lib/#/v/l/#' -e 's#/usr/lib/#/v/u/lib/#' < "$LA" > "$LB.n"
    if test $(stat --format %s "$LA") -ne $(stat --format %s "$LA") ; then
        echo Patching $LA to $LB did not work
        exit 1
    fi
    mv "$LB.n" "$LB"
    touch -r "$LA" "$LB"
    chmod 755 "$LB"
fi

################# random directories and links
mkdir -p "$R$LIBV/"{conf,db,log,etc,themes,var/lib}
chroot "$R" chown -R venus $LIBV/{etc,conf,db,log,.config}

$Q echo Checking symlinks
fln "$MNT/lib" "$R/l"
fln "lib" "$V/usr/l"
# fln "$MNT/opt/victronenergy" "$R/opt/victronenergy"
test -e "$R/opt/victronenergy" || ln -s "$MNT/opt/victronenergy" "$R/opt/victronenergy"
fln "$LIBV" "$R/data"
fln "$LIBV/etc" "$R/etc/venus"
fln "$MNT/usr/lib/fonts" "$R/usr/lib/fonts"
fln "$MNT/usr/lib/gconv" "$R/usr/lib/gconv"

mkdir -p "$R/v"
chmod 755 "$R/v"
fln "$MNT/lib" "$R/v/l"
fln "$MNT/usr" "$R/v/u"

I=""
case "$(chroot "$R" dpkg --print-architecture)" in
    (arm64|armhf)
        # nothing to do
        ;;
    (*)
        test -s "$R/usr/bin/qemu-arm" || I="$I qemu-user"
        ;;
esac

test -s "$R/usr/bin/pstree" || I="$I psmisc"
test -s "$R/usr/bin/sudo" || I="$I sudo"
test -s "$R/usr/sbin/iptables" || I="$I iptables"
test -s "$R/usr/bin/socat" || I="$I socat"
test -s "$R/usr/bin/bluetoothctl" || I="$I bluez"
test -s "$R/usr/bin/fuse-overlayfs" || I="$I fuse-overlayfs"
test -d "$R/usr/lib/python3/dist-packages/dbus_next" || I="$I python3-dbus-next"
test -d "$R/usr/lib/python3/dist-packages/serial_asyncio" || I="$I python3-serial-asyncio"

for P in lxml dbus pyudev pymodbus dnslib websockets click asyncclick asyncdbus ; do
    test -d "$R/usr/lib/python3/dist-packages/$P" && continue
    I="$I python3-$P"
done
subs pkg-r
test -z "$I" || apti "$R" $I

NTW="$R/etc/systemd/system/network-online.target.wants"
mkdir -p "$NTW"
fln /lib/systemd/system/user@.service "$NTW/user@venus.service"
fln /etc/systemd/system/venus.service "$R/etc/systemd/system/network-online.target.wants/venus.service"

GD="$V/opt/victronenergy/gui/gfxdrivers"
fln "$MNT/usr/lib/qtopia/plugins/gfxdrivers" "$GD"

fln "$USRV/bin/get-unique-id" "$R/sbin/get-unique-id"
fln "$MNT/usr/bin/dbus" "$R/usr/bin/dbus"

fln "$USRV/service" "$R/$LIBV/.config/systemd/systemd.control"

make -C "$HERE/ext/dbus-modbus-client" DESTDIR="$R/$USRV/opt" bindir=dbus-modbus-client install

################# overlay

fdo "$R/etc/systemd/system/opt-victronenergy.mount" || \
    cat >"$R/etc/systemd/system/opt-victronenergy.mount" <<_END_
[Unit]
After=sysinit.target
Requires=sysinit.target

[Mount]
Where=/opt/victronenergy
What=$USRV/opt
Type=fuse.fuse-overlayfs
Options=allow_other,lowerdir=$MNT/opt/victronenergy,upperdir=$USRV/opt,workdir=$USRV/.opt
_END_

################# patches

pat() { # path [sub]
    f="$1"
    if [ $# = 1 ] ; then p="$HERE/patch/$f" ; else  p="$HERE/install.d/$2/patch/$f"; fi
    fs="$V/opt/victronenergy/$f"
    fd="$R$USRV/opt/$f"
    fchg "$fs" "$fd" || \
	    $p < $fs > $fd
}

(cd "$HERE/patch" ; find . -type f ) | while read f ; do
    pat "$f"
done
for S in "${SUB[@]}" ; do
    test -d "$HERE/$S/patch" || continue
    (cd "$HERE/$S/patch" ; find . -type f ) | while read f ; do
        pat "$f" "$S"
    done
done



################# VNC
VPW="$R$LIBV/conf/vncpassword.txt"
if test ! -s "$VPW" ; then
    read -s -p "VNC password: " pwd
    echo "$pwd" >"$VPW"
    pwd=
fi

if test -n "$FORCE" || ! grep -qs "dport 5900" "$R/etc/rc.local" ; then
    cat >"$R/etc/rc.local" <<_END_
#!/bin/bash

# autogenerated. Yes this is a hack. TODO.

iptables -t nat -D PREROUTING -i eth0 -p tcp --dport 5900 -j DNAT --to-destination 127.0.0.1:5900 2>/dev/null
iptables -t nat -I PREROUTING -i eth0 -p tcp --dport 5900 -j DNAT --to-destination 127.0.0.1:5900 2>/dev/null

sysctl net.ipv4.ip_forward=1
sysctl net.ipv4.conf.eth0.route_localnet=1
_END_
    chmod 0755 "$R/etc/rc.local"
fi
test "$R" = "/" && systemctl restart rc-local.service


################# udev

if test ! -s "$R/etc/udev/rules.d/75-venusian-serial.rules" ; then
    (
    cat <<_END_
ACTION=="add", SUBSYSTEM=="tty", SUBSYSTEMS=="platform|usb-serial", RUN+="$USRV/bin/serial-add %k"
_END_
    sed -e '/SYMLINK+=/d' -e '/RUN+=/d' "$V/etc/udev/rules.d/serial-starter.rules" 
    ) > "$R/etc/udev/rules.d/75-venusian-serial.rules"
fi
# We're not using the Venus serial starter.



################# mountpoints

$Q echo Setting up mount points

UD="$R/etc/systemd/system/user@venus.service.d/"
mkdir -p $UD

MP=
test -d "$R/$MNT/opt/victronenergy" || MP=$(systemd-escape -m $MNT)

fdo "$UD/mount.conf" || cat >"$UD/mount.conf" <<_END_
[Unit]
After=opt-victronenergy.mount $MP
Requires=opt-victronenergy.mount $MP
_END_

fdo "$UD/bind.conf" || cat >"$UD/bind.conf" <<_END_
[Service]
BindPaths=/var/lib/venusian/%i:/data
_END_

if test -n "$MP" ; then
    mkdir -p "$R/$MNT"

    # no test of $FORCE here
    test ! -f "$R/etc/systemd/system/$MP" && \
        cat >"$R/etc/systemd/system/$MP" <<_END_
[Unit]
After=sysinit.target
Requires=sysinit.target

[Mount]
Where=$MNT
What=$dir
Type=none
Options=bind
_END_
    if test -n "$FORCE" ; then
        echo "*** $R/etc/systemd/system/$MP was not overwritten. ***"
    else
        echo "*** Warning *** Adjust $R/etc/systemd/system/$MP ***"
    fi
fi


################# finish

chroot "$R" /sbin/adduser venus bluetooth

find "$R/$USRV" -type d -print0|xargs -0 chmod 755
find "$R/$USRV/"{bin,opt} -type f -print0|xargs -0 chmod 755

subs post

test "$R" = "/" && systemctl daemon-reload

$Q echo "Done."
